@inject IAuthenticationService _authService
@inject NavigationManager _navigationManager

@if (notAuthorized)
{
    <div>
        <p>You do not have access to the requested page</p>
    </div>
}

@code {
    [CascadingParameter]
    public Task<AuthenticationState> _authState { get; set; }
    bool notAuthorized { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var autState = await _authState;
        if (autState?.User.Identity is null || !autState.User.Identity.IsAuthenticated)
        {
            var returnUrl = _navigationManager.ToBaseRelativePath(_navigationManager.Uri);
            if(string.IsNullOrEmpty(returnUrl))
            {
                _navigationManager.NavigateTo("login");
            }
            else
            {
                _navigationManager.NavigateTo($"login?returnUrl={returnUrl}");
            }
        }
        else
        {
            notAuthorized = true;
        }
    }
}
